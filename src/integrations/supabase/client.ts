
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://hxauxozopvpzpdygoqwf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imh4YXV4b3pvcHZwenBkeWdvcXdmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcwNzAxNjQsImV4cCI6MjA2MjY0NjE2NH0.-4tXlRVZZCx-6ehO9-1lxLsJM3Kmc1sMI8hSKwV9UOU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Ensure we're not creating multiple instances
let supabaseInstance: ReturnType<typeof createClient<Database>> | null = null;

export const supabase = supabaseInstance || createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      storage: localStorage,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: false, // Disable auto detection of OAuth redirect to prevent loops
      debug: true // Enable debug mode for auth issues
    }
  }
);

// Store instance to avoid recreating
supabaseInstance = supabase;

// Add debugging listener for auth state changes
supabase.auth.onAuthStateChange((event, session) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] Supabase client: Auth state change: ${event}`, {
    hasSession: !!session,
    sessionExpiry: session?.expires_at ? new Date(session.expires_at * 1000).toISOString() : null,
    userId: session?.user?.id
  });
});

// Log init completion
console.log(`[${new Date().toISOString()}] Supabase client initialized`);
