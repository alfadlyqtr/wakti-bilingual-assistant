
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Calendar, Clock, MapPin, ArrowLeft, Save } from 'lucide-react';
import { toast } from 'sonner';
import { supabase } from '@/integrations/supabase/client';
import { useTheme } from '@/providers/ThemeProvider';
import { t } from '@/utils/translations';
import BackgroundCustomizer from './BackgroundCustomizer';
import TextStyleControls from './TextStyleControls';
import { localToUtcDateTime, getAllDayLocalTimes } from '@/utils/timeUtils';

const eventSchema = z.object({
  title: z.string().min(1, 'Title is required'),
  description: z.string().optional(),
  location: z.string().optional(),
  location_link: z.string().url().optional().or(z.literal('')),
  start_time: z.string().min(1, 'Start time is required'),
  end_time: z.string().min(1, 'End time is required'),
  is_all_day: z.boolean().default(false),
  is_public: z.boolean().default(false),
});

type EventFormData = z.infer<typeof eventSchema>;

interface BackgroundData {
  type: 'color' | 'gradient' | 'image' | 'ai';
  backgroundColor?: string;
  backgroundGradient?: string;
  backgroundImage?: string;
}

interface TextStyleData {
  fontSize: number;
  textColor: string;
  textAlign: 'left' | 'center' | 'right';
  fontWeight: 'normal' | 'bold';
  fontStyle: 'normal' | 'italic';
  textDecoration: 'none' | 'underline';
  fontFamily: string;
}

export default function EventCreate() {
  const navigate = useNavigate();
  const { language } = useTheme();
  const [isLoading, setIsLoading] = useState(false);
  const [backgroundData, setBackgroundData] = useState<BackgroundData>({
    type: 'color',
    backgroundColor: '#3b82f6'
  });

  const [textStyleData, setTextStyleData] = useState<TextStyleData>({
    fontSize: 24,
    textColor: '#ffffff',
    textAlign: 'center',
    fontWeight: 'bold',
    fontStyle: 'normal',
    textDecoration: 'none',
    fontFamily: 'Inter'
  });

  const {
    register,
    handleSubmit,
    watch,
    setValue,
    formState: { errors },
  } = useForm<EventFormData>({
    resolver: zodResolver(eventSchema),
    defaultValues: {
      is_all_day: false,
      is_public: false,
    },
  });

  const isAllDay = watch('is_all_day');
  const watchedTitle = watch('title');
  const watchedDescription = watch('description');

  const onSubmit = async (data: EventFormData) => {
    try {
      setIsLoading(true);
      console.log('Starting event creation with form data:', data);
      console.log('Form start_time (local):', data.start_time);
      console.log('Form end_time (local):', data.end_time);
      console.log('Background data:', backgroundData);
      console.log('Text style data:', textStyleData);

      // Get current user
      const { data: userData, error: userError } = await supabase.auth.getUser();
      
      if (userError || !userData.user) {
        console.error('User authentication error:', userError);
        toast.error('You must be logged in to create events');
        return;
      }

      console.log('User authenticated:', userData.user.id);

      // Convert local times to UTC for database storage
      const utcStartTime = localToUtcDateTime(data.start_time);
      const utcEndTime = localToUtcDateTime(data.end_time);

      console.log('Converted start_time (UTC):', utcStartTime);
      console.log('Converted end_time (UTC):', utcEndTime);

      // Prepare event data with explicit created_by field and text styling
      const eventData = {
        title: data.title,
        description: data.description || null,
        location: data.location || null,
        location_link: data.location_link || null,
        start_time: utcStartTime,
        end_time: utcEndTime,
        is_all_day: data.is_all_day,
        is_public: data.is_public,
        created_by: userData.user.id,
        background_type: backgroundData.type,
        background_color: backgroundData.backgroundColor || null,
        background_gradient: backgroundData.backgroundGradient || null,
        background_image: backgroundData.backgroundImage || null,
        font_size: textStyleData.fontSize,
        text_color: textStyleData.textColor,
        text_align: textStyleData.textAlign,
        font_weight: textStyleData.fontWeight,
        font_style: textStyleData.fontStyle,
        text_decoration: textStyleData.textDecoration,
        font_family: textStyleData.fontFamily,
        // short_id will be automatically generated by the trigger
      };

      console.log('Creating event with prepared data:', eventData);

      const { data: newEvent, error } = await supabase
        .from('events')
        .insert([eventData])
        .select()
        .single();

      if (error) {
        console.error('Supabase insert error:', error);
        toast.error(`Failed to create event: ${error.message}`);
        return;
      }

      console.log('Event created successfully:', newEvent);
      
      // Show share link with short ID
      if (newEvent.short_id) {
        const shareUrl = `${window.location.origin}/wakti/${newEvent.short_id}`;
        navigator.clipboard.writeText(shareUrl);
        toast.success(`Event created! Share link copied: wakti.qa/${newEvent.short_id}`);
      } else {
        toast.success(t("eventCreatedSuccessfully", language));
      }
      
      navigate('/events');
    } catch (error) {
      console.error('Unexpected error creating event:', error);
      toast.error('An unexpected error occurred while creating the event');
    } finally {
      setIsLoading(false);
    }
  };

  const handleAllDayToggle = (checked: boolean) => {
    setValue('is_all_day', checked);
    if (checked) {
      // Set to full day times in local timezone
      const { start, end } = getAllDayLocalTimes();
      console.log('Setting all-day times:', { start, end });
      
      setValue('start_time', start);
      setValue('end_time', end);
    }
  };

  const handleBackgroundChange = (background: BackgroundData) => {
    console.log('Background changed:', background);
    setBackgroundData(background);
  };

  return (
    <div className="flex flex-col h-screen">
      {/* Mobile Header */}
      <header className="mobile-header shrink-0">
        <div className="flex items-center">
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => navigate('/events')}
            className="mr-2"
          >
            <ArrowLeft className="h-4 w-4" />
          </Button>
          <h1 className="text-xl font-bold">{t("createEvent", language)}</h1>
        </div>
        <Button 
          type="submit" 
          form="event-form"
          disabled={isLoading}
          size="sm"
        >
          <Save className="h-4 w-4 mr-1" />
          {isLoading ? t("creating", language) : t("save", language)}
        </Button>
      </header>

      <div className="flex-1 min-h-0 overflow-y-auto p-4 pb-20">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calendar className="h-5 w-5" />
              {t("eventDetails", language)}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <form id="event-form" onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              {/* Basic Information */}
              <div className="space-y-4">
                <div>
                  <Label htmlFor="title">{t("title", language)} *</Label>
                  <Input
                    id="title"
                    {...register('title')}
                    placeholder={t("enterEventTitle", language)}
                    className={errors.title ? 'border-destructive' : ''}
                  />
                  {errors.title && (
                    <p className="text-sm text-destructive mt-1">{errors.title.message}</p>
                  )}
                </div>

                <div>
                  <Label htmlFor="description">{t("description", language)}</Label>
                  <Textarea
                    id="description"
                    {...register('description')}
                    placeholder={t("enterEventDescription", language)}
                    rows={3}
                  />
                </div>
              </div>

              {/* Location */}
              <div className="space-y-4">
                <div>
                  <Label htmlFor="location" className="flex items-center gap-2">
                    <MapPin className="h-4 w-4" />
                    {t("location", language)}
                  </Label>
                  <Input
                    id="location"
                    {...register('location')}
                    placeholder={t("enterLocation", language)}
                  />
                </div>

                <div>
                  <Label htmlFor="location_link">{t("locationLink", language)}</Label>
                  <Input
                    id="location_link"
                    {...register('location_link')}
                    placeholder="https://maps.google.com/..."
                    type="url"
                    className={errors.location_link ? 'border-destructive' : ''}
                  />
                  {errors.location_link && (
                    <p className="text-sm text-destructive mt-1">{errors.location_link.message}</p>
                  )}
                </div>
              </div>

              {/* Date and Time */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <Label className="flex items-center gap-2">
                    <Clock className="h-4 w-4" />
                    {t("dateTime", language)}
                  </Label>
                  <div className="flex items-center space-x-2">
                    <Switch
                      id="is_all_day"
                      checked={isAllDay}
                      onCheckedChange={handleAllDayToggle}
                    />
                    <Label htmlFor="is_all_day" className="text-sm">
                      {t("allDay", language)}
                    </Label>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="start_time">{t("startTime", language)} *</Label>
                    <Input
                      id="start_time"
                      type="datetime-local"
                      {...register('start_time')}
                      className={errors.start_time ? 'border-destructive' : ''}
                    />
                    {errors.start_time && (
                      <p className="text-sm text-destructive mt-1">{errors.start_time.message}</p>
                    )}
                  </div>

                  <div>
                    <Label htmlFor="end_time">{t("endTime", language)} *</Label>
                    <Input
                      id="end_time"
                      type="datetime-local"
                      {...register('end_time')}
                      className={errors.end_time ? 'border-destructive' : ''}
                    />
                    {errors.end_time && (
                      <p className="text-sm text-destructive mt-1">{errors.end_time.message}</p>
                    )}
                  </div>
                </div>
              </div>

              {/* Main Preview */}
              <div className="space-y-2">
                <Label>Preview</Label>
                <div 
                  className="mt-2 h-40 rounded-lg border-2 border-dashed border-muted-foreground/20 flex flex-col items-center justify-center p-4"
                  style={{
                    background: backgroundData.type === 'gradient' 
                      ? backgroundData.backgroundGradient
                      : backgroundData.type === 'image' || backgroundData.type === 'ai'
                      ? `url(${backgroundData.backgroundImage}) center/cover`
                      : backgroundData.backgroundColor || '#3b82f6',
                    color: textStyleData.textColor,
                    textAlign: textStyleData.textAlign,
                    fontWeight: textStyleData.fontWeight,
                    fontStyle: textStyleData.fontStyle,
                    textDecoration: textStyleData.textDecoration,
                    fontFamily: textStyleData.fontFamily,
                    textShadow: '2px 2px 4px rgba(0,0,0,0.5)'
                  }}
                >
                  <h2 style={{ fontSize: `${textStyleData.fontSize}px`, margin: 0, lineHeight: 1.2 }}>
                    {watchedTitle || 'Your Event Title'}
                  </h2>
                  {watchedDescription && (
                    <p style={{ 
                      fontSize: `${Math.max(textStyleData.fontSize * 0.6, 14)}px`, 
                      margin: '8px 0 0 0', 
                      lineHeight: 1.3,
                      opacity: 0.9
                    }}>
                      {watchedDescription}
                    </p>
                  )}
                </div>
              </div>

              {/* Background Customization */}
              <BackgroundCustomizer 
                onBackgroundChange={handleBackgroundChange}
                currentBackground={backgroundData}
                eventTitle={watchedTitle}
                eventDescription={watchedDescription}
                hidePreview={true}
              />

              {/* Text Styling Controls */}
              <TextStyleControls
                fontSize={textStyleData.fontSize}
                textColor={textStyleData.textColor}
                textAlign={textStyleData.textAlign}
                fontWeight={textStyleData.fontWeight}
                fontStyle={textStyleData.fontStyle}
                textDecoration={textStyleData.textDecoration}
                fontFamily={textStyleData.fontFamily}
                onFontSizeChange={(size) => setTextStyleData(prev => ({ ...prev, fontSize: size }))}
                onTextColorChange={(color) => setTextStyleData(prev => ({ ...prev, textColor: color }))}
                onTextAlignChange={(align) => setTextStyleData(prev => ({ ...prev, textAlign: align }))}
                onFontWeightChange={(weight) => setTextStyleData(prev => ({ ...prev, fontWeight: weight }))}
                onFontStyleChange={(style) => setTextStyleData(prev => ({ ...prev, fontStyle: style }))}
                onTextDecorationChange={(decoration) => setTextStyleData(prev => ({ ...prev, textDecoration: decoration }))}
                onFontFamilyChange={(family) => setTextStyleData(prev => ({ ...prev, fontFamily: family }))}
              />

              {/* Settings */}
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <Label htmlFor="is_public">{t("publicEvent", language)}</Label>
                    <p className="text-sm text-muted-foreground">
                      {t("publicEventDescription", language)}
                    </p>
                  </div>
                  <Switch
                    id="is_public"
                    {...register('is_public')}
                  />
                </div>
              </div>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
