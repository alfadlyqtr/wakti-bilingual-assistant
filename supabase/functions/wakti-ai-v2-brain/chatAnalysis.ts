
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1'
import { callClaudeAPI, callDeepSeekAPI, logWithTimestamp, validateApiKeys } from './utils.ts';

export async function processWithClaudeAI(
  message: string,
  userId: string,
  conversationId: string | null,
  language: string = 'en',
  processedFiles: any[] = [],
  recentMessages: any[] = [],
  conversationSummary: string = '',
  personalTouch: any = null,
  maxTokens: number = 4096,
  activeTrigger: string = 'chat'
) {
  try {
    console.log('üöÄ WAKTI AI: Starting Claude processing with UPGRADED system');
    
    // Validate API keys at start
    const keyValidation = validateApiKeys();
    if (!keyValidation.valid) {
      throw new Error(`Missing API keys: ${keyValidation.missing.join(', ')}`);
    }
    
    console.log('üñºÔ∏è VISION: Processing', processedFiles.length, 'files for Vision');
    
    // Check for task creation triggers 
    const taskTriggers = {
      en: ['create task', 'create a task', 'new task', 'add task', 'make task', 'create reminder', 'remind me'],
      ar: ['ÿ£ŸÜÿ¥ÿ¶ ŸÖŸáŸÖÿ©', 'ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸáŸÖÿ©', 'ŸÖŸáŸÖÿ© ÿ¨ÿØŸäÿØÿ©', 'ÿ£ÿ∂ŸÅ ŸÖŸáŸÖÿ©', 'ÿ£ŸÜÿ¥ÿ¶ ÿ™ÿ∞ŸÉŸäÿ±', 'ÿ∞ŸÉÿ±ŸÜŸä']
    };
    
    const shouldCreateTask = taskTriggers[language as 'en' | 'ar']?.some(trigger => 
      message.toLowerCase().includes(trigger.toLowerCase())
    ) || taskTriggers.en.some(trigger => 
      message.toLowerCase().includes(trigger.toLowerCase())
    );
    
    // Build FULL context from recent messages and summary
    let contextMessages = [];
    
    // Add conversation summary as system context if available
    if (conversationSummary && conversationSummary.trim()) {
      contextMessages.push({
        role: 'user',
        content: `Previous conversation context: ${conversationSummary}`
      });
      console.log(`üß† CONTEXT: Added conversation summary (${conversationSummary.length} chars)`);
    }
    
    // Add recent messages for immediate context (last 3-4 messages)
    const formattedRecentMessages = recentMessages.slice(-4).map(msg => ({
      role: msg.role === 'assistant' ? 'assistant' : 'user',
      content: msg.content
    }));
    contextMessages.push(...formattedRecentMessages);
    console.log(`üß† CONTEXT: Added ${formattedRecentMessages.length} recent messages`);
    
    // ENHANCED: Better image processing with proper validation
    const hasImages = processedFiles && processedFiles.length > 0 && 
                     processedFiles.some(file => file.type && file.type.startsWith('image/'));
    
    let systemPrompt = '';
    
    if (hasImages) {
      // VISION PROCESSING with Claude 3.5 Sonnet
      console.log('üñºÔ∏è VISION: Processing with images using Claude 3.5 Sonnet');
      
      // ENHANCED BILINGUAL VISION SYSTEM PROMPTS
      systemPrompt = language === 'ar' 
        ? `ÿ£ŸÜÿ™ ŸÖÿ≥ÿßÿπÿØ ÿ∞ŸÉŸä ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿµŸàÿ± ŸàÿßŸÑÿ±ÿ§Ÿäÿ© ÿßŸÑÿ≠ÿßÿ≥Ÿàÿ®Ÿäÿ©. ÿπŸÜÿØŸÖÿß Ÿäÿ±ŸÅÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸàŸÜ ÿµŸàÿ±ÿ©ÿå Ÿäÿ¨ÿ® ÿπŸÑŸäŸÉ:

1. **ÿ™ÿ≠ŸÑŸäŸÑ ÿ¥ÿßŸÖŸÑ ŸÑŸÑÿµŸàÿ±ÿ©**: ŸÅÿ≠ÿµ ÿ¨ŸÖŸäÿπ ÿßŸÑÿπŸÜÿßÿµÿ± ÿßŸÑŸÖÿ±ÿ¶Ÿäÿ© ÿ®ÿØŸÇÿ© ÿπÿßŸÑŸäÿ©
2. **ÿßÿ≥ÿ™ÿÆÿ±ÿßÿ¨ ÿßŸÑŸÜÿµŸàÿµ**: ŸÇÿ±ÿßÿ°ÿ© Ÿàÿ™ÿ≠ŸÑŸäŸÑ ÿ£Ÿä ŸÜÿµŸàÿµ ŸÖŸàÿ¨ŸàÿØÿ© ŸÅŸä ÿßŸÑÿµŸàÿ±ÿ©
3. **ŸÅŸáŸÖ ÿßŸÑÿ≥ŸäÿßŸÇ**: ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ∫ÿ±ÿ∂ ŸàÿßŸÑŸÖÿπŸÜŸâ ŸÖŸÜ ÿßŸÑÿµŸàÿ±ÿ©
4. **ŸàÿµŸÅ ŸÖŸÅÿµŸÑ**: ÿ™ŸÇÿØŸäŸÖ ŸàÿµŸÅ ÿ¥ÿßŸÖŸÑ ŸàŸàÿßÿ∂ÿ≠ ÿ®ÿßŸÑÿπÿ±ÿ®Ÿäÿ©
5. **ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ©**: ÿßŸÑÿ±ÿØ ÿπŸÑŸâ ÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ≠ŸàŸÑ ÿßŸÑÿµŸàÿ±ÿ©

ÿßÿ®ÿØÿ£ ÿ±ÿØŸÉ ÿØÿßÿ¶ŸÖÿßŸã ÿ®ŸÄ: "ÿ£ÿ≥ÿ™ÿ∑Ÿäÿπ ÿ£ŸÜ ÿ£ÿ±Ÿâ ŸÅŸä Ÿáÿ∞Ÿá ÿßŸÑÿµŸàÿ±ÿ©..."

ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑÿµŸàÿ±ÿ© ÿ∫Ÿäÿ± Ÿàÿßÿ∂ÿ≠ÿ©ÿå ÿßÿ∞ŸÉÿ± ÿ∞ŸÑŸÉ ÿ®ÿµÿ±ÿßÿ≠ÿ©. ŸÑÿß ÿ™ŸÅÿ™ÿ±ÿ∂ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØÿ©.`
        : `You are an advanced AI assistant with superior vision capabilities. When users upload images, you must:

1. **Comprehensive Image Analysis**: Examine all visual elements with high precision
2. **Text Extraction**: Read and analyze any text present in the image
3. **Context Understanding**: Determine the purpose and meaning of the image
4. **Detailed Description**: Provide thorough and clear descriptions
5. **Question Answering**: Respond to user queries about the image content

Always start your response with: "I can see in this image..."

If the image is unclear or low quality, mention that honestly. Do not fabricate information.`;
    } else {
      // Regular text chat with ENHANCED PERSONALIZATION
      console.log('üí¨ CHAT: Processing text-only using Claude 3.5 Sonnet');
      
      // ENHANCED chat prompt with better personalization
      systemPrompt = language === 'ar'
        ? `ÿ£ŸÜÿ™ ŸÖÿ≥ÿßÿπÿØ ÿ∞ŸÉŸä ŸÖÿ™ŸÇÿØŸÖ ÿßÿ≥ŸÖŸá WAKTI AI. ÿ£ŸÜÿ™ ŸÖŸÅŸäÿØ ŸàŸÖÿ™ÿπÿßŸàŸÜ Ÿàÿ∞ŸÉŸä. ÿßÿ¨ÿ® ÿπŸÑŸâ ÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ Ÿàÿ∑ŸÑÿ®ÿßÿ™ŸáŸÖ ÿ®ÿ∑ÿ±ŸäŸÇÿ© ÿ∑ÿ®ŸäÿπŸäÿ© ŸàŸÖÿ≠ÿßÿØÿ´ÿ©.`
        : `You are WAKTI AI, an advanced intelligent assistant. You are helpful, collaborative, and smart. Respond naturally and conversationally to user questions and requests.`;
      
      // Add enhanced personalization if available
      if (personalTouch) {
        if (personalTouch.nickname) {
          systemPrompt += language === 'ar' 
            ? ` ÿÆÿßÿ∑ÿ® ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ®ÿßÿ≥ŸÖ ${personalTouch.nickname}.`
            : ` Address the user as ${personalTouch.nickname}.`;
        }
        if (personalTouch.aiNickname) {
          systemPrompt += language === 'ar'
            ? ` ŸäŸÖŸÉŸÜ ŸÖŸÜÿßÿØÿßÿ™ŸÉ ÿ®ÿßÿ≥ŸÖ ${personalTouch.aiNickname}.`
            : ` You can be called ${personalTouch.aiNickname}.`;
        }
        if (personalTouch.tone && personalTouch.tone !== 'neutral') {
          systemPrompt += language === 'ar'
            ? ` ÿßÿ≥ÿ™ÿÆÿØŸÖ ŸÜÿ®ÿ±ÿ© ${personalTouch.tone}.`
            : ` Use a ${personalTouch.tone} tone.`;
        }
        if (personalTouch.style) {
          systemPrompt += language === 'ar'
            ? ` ŸÇÿØŸÖ ÿ•ÿ¨ÿßÿ®ÿßÿ™ ${personalTouch.style}.`
            : ` Provide ${personalTouch.style} responses.`;
        }
        if (personalTouch.instruction) {
          systemPrompt += language === 'ar'
            ? ` ÿ™ÿπŸÑŸäŸÖÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ©: ${personalTouch.instruction}`
            : ` Additional instruction: ${personalTouch.instruction}`;
        }
      }
    }
    
    if (shouldCreateTask) {
      systemPrompt += language === 'ar'
        ? ' ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ Ÿäÿ±ŸäÿØ ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸáŸÖÿ© ÿ£Ÿà ÿ™ÿ∞ŸÉŸäÿ±. ÿßÿπÿ™ÿ±ŸÅ ÿ®ÿ∞ŸÑŸÉ ŸàŸÇÿØŸÖ ÿßŸÇÿ™ÿ±ÿßÿ≠ÿßÿ™ ŸÖŸÅŸäÿØÿ© ÿ≠ŸàŸÑ ÿ™ŸÅÿßÿµŸäŸÑ ÿßŸÑŸÖŸáŸÖÿ©.'
        : ' The user wants to create a task or reminder. Acknowledge this and provide helpful suggestions about the task details.';
    }

    console.log(`üéØ MODEL SELECTION: Using Claude 3.5 Sonnet for ${hasImages ? 'Vision' : 'Chat'}`);

    // Prepare messages for Claude API
    const claudeMessages = [];
    
    // Add context messages
    if (contextMessages.length > 0) {
      claudeMessages.push(...contextMessages);
    }

    if (hasImages) {
      console.log('üñºÔ∏è VISION: Processing', processedFiles.length, 'files for Claude Vision');
      
      // FIXED: Enhanced image processing with proper validation
      const messageContent = [
        { type: 'text', text: message }
      ];

      // Enhanced image processing with better error handling
      for (const file of processedFiles) {
        if (file.type && file.type.startsWith('image/')) {
          console.log(`üñºÔ∏è VISION: Processing image: ${file.name}`);
          
          // FIXED: Better image URL handling
          let imageUrl = null;
          
          // Check for base64 data first (most reliable)
          if (file.base64Data && file.base64Data.length > 100) {
            // Ensure proper format
            const mediaType = file.type || 'image/jpeg';
            imageUrl = `data:${mediaType};base64,${file.base64Data}`;
          } else if (file.image_url?.url && file.image_url.url.startsWith('data:image/')) {
            imageUrl = file.image_url.url;
          } else if (file.url && file.url.startsWith('data:image/')) {
            imageUrl = file.url;
          }
          
          console.log(`üîó VISION URL CHECK: ${imageUrl ? 'VALID BASE64 DATA FOUND' : 'NO VALID BASE64 DATA'}`);
          
          if (imageUrl && imageUrl.startsWith('data:image/')) {
            // Extract base64 data and media type
            const [mediaInfo, base64Data] = imageUrl.split(',');
            const mediaType = mediaInfo.split(':')[1].split(';')[0];
            
            if (base64Data && base64Data.length > 100) {
              messageContent.push({
                type: 'image',
                source: {
                  type: 'base64',
                  media_type: mediaType,
                  data: base64Data
                }
              });
              console.log(`‚úÖ VISION: Successfully added image ${file.name} (${base64Data.length} chars)`);
            } else {
              console.error(`‚ùå VISION: Invalid base64 data for ${file.name}`);
            }
          } else {
            console.error(`‚ùå VISION: No valid base64 URL found for image: ${file.name}`);
          }
        }
      }

      claudeMessages.push({ 
        role: 'user', 
        content: messageContent 
      });
      console.log(`üñºÔ∏è VISION: Message content prepared with ${messageContent.length - 1} images`);
    } else {
      // Simple text message for regular chat
      claudeMessages.push({ 
        role: 'user', 
        content: message 
      });
    }

    // Add system prompt as first message
    if (systemPrompt) {
      claudeMessages.unshift({ 
        role: 'user', 
        content: systemPrompt 
      });
    }

    // Enhanced retry logic with detailed error handling
    let lastError;
    const maxRetries = 2;
    
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ ATTEMPT ${attempt + 1}: Processing request`);
        
        if (attempt === 0) {
          // Primary: Claude 3.5 Sonnet
          const claudeResponse = await callClaudeAPI(claudeMessages, maxTokens);
          
          console.log('üì• CLAUDE SUCCESS: Response received from Claude 3.5 Sonnet');
          
          if (!claudeResponse.content || !claudeResponse.content[0] || !claudeResponse.content[0].text) {
            console.error('‚ùå CLAUDE ERROR: Invalid response structure:', claudeResponse);
            throw new Error('Invalid Claude API response structure');
          }

          const aiResponse = claudeResponse.content[0].text;
          console.log('‚úÖ CLAUDE SUCCESS: Response generated successfully');
          console.log('üéØ RESPONSE PREVIEW:', aiResponse.substring(0, 200) + '...');
          
          return {
            response: aiResponse,
            model: 'claude-3-5-sonnet-20241022',
            tokensUsed: claudeResponse.usage?.input_tokens + claudeResponse.usage?.output_tokens || 0,
            contextUsed: contextMessages.length,
            personalizedResponse: !!personalTouch,
            taskCreationIntent: shouldCreateTask,
            intent: shouldCreateTask ? 'task_creation' : 'chat',
            confidence: shouldCreateTask ? 'high' : 'medium',
            attempt: attempt + 1,
            fallbackUsed: false,
            visionUsed: hasImages,
            fullContextRestored: true
          };

        } else {
          // Fallback: DeepSeek (chat only, no vision)
          console.log('üîÑ FALLBACK: Using DeepSeek chat fallback');
          
          if (hasImages) {
            console.log('üîÑ VISION FALLBACK: Converting to text-only for DeepSeek');
            const fallbackMessages = [
              { role: 'system', content: systemPrompt },
              ...contextMessages,
              { role: 'user', content: `${message} [Note: User uploaded ${processedFiles.length} image(s) but Vision processing failed]` }
            ];
            
            const deepseekResponse = await callDeepSeekAPI(fallbackMessages, maxTokens);
            
            return {
              response: deepseekResponse.choices[0].message.content,
              model: 'deepseek-chat',
              tokensUsed: deepseekResponse.usage?.total_tokens || 0,
              contextUsed: contextMessages.length,
              personalizedResponse: !!personalTouch,
              taskCreationIntent: shouldCreateTask,
              intent: shouldCreateTask ? 'task_creation' : 'chat',
              confidence: shouldCreateTask ? 'high' : 'medium',
              attempt: attempt + 1,
              fallbackUsed: true,
              visionUsed: false,
              fullContextRestored: true
            };
          } else {
            // Regular chat fallback
            const fallbackMessages = [
              { role: 'system', content: systemPrompt },
              ...contextMessages.map(msg => ({ role: msg.role, content: msg.content })),
              { role: 'user', content: message }
            ];
            
            const deepseekResponse = await callDeepSeekAPI(fallbackMessages, maxTokens);
            
            return {
              response: deepseekResponse.choices[0].message.content,
              model: 'deepseek-chat',
              tokensUsed: deepseekResponse.usage?.total_tokens || 0,
              contextUsed: contextMessages.length,
              personalizedResponse: !!personalTouch,
              taskCreationIntent: shouldCreateTask,
              intent: shouldCreateTask ? 'task_creation' : 'chat',
              confidence: shouldCreateTask ? 'high' : 'medium',
              attempt: attempt + 1,
              fallbackUsed: true,
              visionUsed: false,
              fullContextRestored: true
            };
          }
        }

      } catch (error) {
        console.error(`üö® Attempt ${attempt + 1} failed:`, error);
        lastError = error;
        
        if (attempt < maxRetries) {
          console.log(`üîÑ RETRY: Attempting DeepSeek fallback (attempt ${attempt + 2})`);
          continue;
        }
      }
    }
    
    // All retries failed - return meaningful error
    console.error('üö® All retry attempts failed:', lastError);
    throw lastError;

  } catch (error) {
    console.error('üö® Critical processing error:', error);
    
    // Enhanced error handling: More meaningful error messages
    let userFriendlyMessage = '';
    
    if (error.message.includes('API key')) {
      userFriendlyMessage = language === 'ar' 
        ? '‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿπÿØÿßÿØ ÿßŸÑŸÜÿ∏ÿßŸÖ. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ÿ£Ÿà ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿ®ÿßŸÑÿØÿπŸÖ ÿßŸÑŸÅŸÜŸä.'
        : '‚ùå System configuration error. Please try again or contact support.';
    } else if (error.message.includes('image') || error.message.includes('vision')) {
      userFriendlyMessage = language === 'ar' 
        ? '‚ùå ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿµŸàÿ±ÿ©. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ ÿ£Ÿà ÿßÿ±ŸÅÿπ ÿµŸàÿ±ÿ© ÿ¨ÿØŸäÿØÿ©.'
        : '‚ùå Sorry, I encountered an error processing your image. Please try again or upload a new image.';
    } else {
      userFriendlyMessage = language === 'ar' 
        ? '‚ùå ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ŸÖÿπÿßŸÑÿ¨ÿ© ÿ∑ŸÑÿ®ŸÉ. ÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.'
        : '‚ùå Sorry, I encountered an error processing your request. Please try again.';
    }
    
    return {
      response: userFriendlyMessage,
      model: 'error',
      tokensUsed: 0,
      contextUsed: 0,
      personalizedResponse: false,
      taskCreationIntent: false,
      error: error.message,
      userFriendlyError: userFriendlyMessage,
      visionUsed: false,
      fullContextRestored: false
    };
  }
}
